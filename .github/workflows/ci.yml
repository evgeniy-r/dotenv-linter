# Github workflow files do not support YAML anchors.

name: CI
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
      - name: Chown cargo registry because of caching
        run: sudo chown -R runner ~/.cargo/registry
      - name: Generate lockfile
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target
        id: cache-target
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-check-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: check
      - name: Cleanup for caching
        uses: actions-rs/cargo@v1
        with:
          command: clean
          args: --package dotenv-linter
        if: steps.cache-target.outputs.cache-hit != 'true'

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
          components: clippy
      - name: Chown cargo registry because of caching
        run: sudo chown -R runner ~/.cargo/registry
      - name: Generate lockfile
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile
      - name: Cache registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target
        id: cache-target
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-check-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Check with Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
      - name: Cleanup for caching
        uses: actions-rs/cargo@v1
        with:
          command: clean
          args: --package dotenv-linter
        if: steps.cache-target.outputs.cache-hit != 'true'
  #   - uses: actions-rs/clippy-check@v1
  #     with:
  #       token: ${{ secrets.GITHUB_TOKEN }}
  #       args: --all-features -- -D warnings

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
      - name: Chown cargo registry because of caching
        run: sudo chown -R runner ~/.cargo/registry
      - name: Generate lockfile
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile
      - name: Cache registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target
        id: cache-target
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
      - name: Cleanup for caching
        uses: actions-rs/cargo@v1
        with:
          command: clean
          args: --package dotenv-linter
        if: steps.cache-target.outputs.cache-hit != 'true'

  tests:
    name: Tests and coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: Chown cargo registry because of caching
        run: sudo chown -R runner ~/.cargo/registry
      - name: Generate lockfile
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile
      # May be there is a better way.
      - name: Set grcov version
        run: echo "::set-env name=GRCOV_VERSION::$(cargo search --limit 1 grcov | head -n1 | cut -d '"' -f2)"
      - name: Cache registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-test-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target
        id: cache-target
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-test-target-${{ hashFiles('**/Cargo.lock') }}
      # actions/cache does not cache files, only directories, so we handle the grcov executable separately.
      - name: Cache grcov
        id: cache-grcov
        uses: actions/cache@v1
        with:
          path: ~/grcov
          key: ${{ runner.os }}-grcov-${{ env.GRCOV_VERSION }}
      - name: Install grcov
        run: |
          mkdir -p ~/grcov
          cargo install --root ~/grcov --version $GRCOV_VERSION grcov
        if: steps.cache-grcov.outputs.cache-hit != 'true'
      - name: Copy grcov from cache
        run: cp ~/grcov/bin/grcov ~/.cargo/bin
      - name: Clean coverage
        run: |
          rm -f target/debug/deps/*.gcda
          rm -f target/debug/deps/*.gcno
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --no-fail-fast
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: |
            -Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads
      - uses: actions-rs/grcov@v0.1
      - uses: codecov/codecov-action@v1
        with:
          file: ./lcov.info
      - name: Cleanup for caching
        uses: actions-rs/cargo@v1
        with:
          command: clean
          args: --package dotenv-linter
        if: steps.cache-target.outputs.cache-hit != 'true'
